<?php

namespace Lost\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceLocationRepository extends EntityRepository
{
    public function getAllServiceLocation() {
        $qb = $this->createQueryBuilder('sl')
        ->orderBy('sl.id', 'desc');
    
        return $qb;
    }
    
    public function getAllServiceLocationSearch($query, $search) {
        
        $query->leftJoin('sl.country', 'c');
        $query->leftJoin('sl.ipAddressZones', 'ipadd');
    
        $query->where('sl.id != :Id');
        $query->setParameter('Id', '');
        
        if(isset($search['searchCountry']) && !empty($search['searchCountry'])){
    
            $query->andWhere('c.name LIKE :cname');
            $query->setParameter('cname', '%'.$search['searchCountry'].'%');
        }
        
        if(isset($search['searchName']) && !empty($search['searchName'])){
        
            $query->andWhere('sl.name LIKE :location');
            $query->setParameter('location', '%'.$search['searchName'].'%');
        }
    
        if(isset($search['searchFromIP']) && !empty($search['searchFromIP'])){
    
            $query->andWhere('ipadd.fromIpAddress LIKE :fip');
            $query->setParameter('fip', '%'.$search['searchFromIP'].'%');
        }
    
        if(isset($search['searchToIP']) && !empty($search['searchToIP'])){
    
            $query->andWhere('ipadd.toIpAddress LIKE :toip');
            $query->setParameter('toip', '%'.$search['searchToIP'].'%');
        }
    
        return $query;
    }
    
    public function getUserLocationWiseService($countryId,$serviceId){
        
        $qb = $this->createQueryBuilder('sl')
                        ->select('sl')
                        ->leftJoin('sl.ipAddressZones', 'iaz')
                        ->leftJoin('iaz.services', 'sr')
                        ->where('sl.country = :country')
                        ->setParameter('country', $countryId)
                        ->andWhere('sr.id IN(:id)')
                        ->setParameter('id', $serviceId);
        
        return $qb->getQuery()->getResult();
    }
    
    public function getUserLocationWiseDiscount($clientIp,$countryId){
    
        $qb = $this->createQueryBuilder('sl')
        ->select('sl, iaz, d')
        ->leftJoin('sl.ipAddressZones', 'iaz')
        ->leftJoin('sl.country', 'c')
        ->leftJoin('sl.serviceLocationDiscounts', 'd')
        ->where('iaz.fromIpAddressLong <= :clientIp')
        ->andWhere('iaz.toIpAddressLong >= :clientIp')
        ->setParameter('clientIp', $clientIp)
        ->andWhere('c.id >= :countryId')
        ->setParameter('countryId', $countryId);
    
        return $qb->getQuery()->getOneOrNullResult();

    }
    
    public function getSearchServiceLocation($tag,$serviceIds){
    
        $query = $this->createQueryBuilder('sl')
                    ->select('sl')
                    ->leftJoin('sl.ipAddressZones', 'iaz')
                    ->leftJoin('iaz.services', 'sr')
                    ->where('sr.id IN(:id)')
                    ->setParameter('id', $serviceIds);
        
        $query->andWhere('sl.name LIKE :name')
              ->setParameter('name', '%' . $tag . '%');
    
        return $query->getQuery()->getResult();
    }
    
    public function getAvailableLocationByService($serviceIds,$locationIds){
    
        $query = $this->createQueryBuilder('sl')
                    ->select('sl')
                    ->leftJoin('sl.ipAddressZones', 'iaz')
                    ->leftJoin('iaz.services', 'sr')
                    ->where('sr.id IN(:id)')
                    ->setParameter('id', $serviceIds)
                    ->andWhere('sl.id IN(:slId)')
                    ->setParameter('slId', $locationIds);
    
        return $query->getQuery()->getResult();
    }
}


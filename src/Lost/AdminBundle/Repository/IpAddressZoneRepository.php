<?php

namespace Lost\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * IpAddressZoneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IpAddressZoneRepository extends EntityRepository {
    
    public function getAllIpAddressRange() {
    $query = $this->createQueryBuilder('ir')
                ->orderBy('ir.id', 'desc');

        return $query;
    }
    
    public function getAllIpAddressByService($service) {
         $query = $this->createQueryBuilder('ir')
              ->innerJoin('ir.services', 's')
              ->where('s.id = :id')
              ->setParameter('id', $service);
       //echo $query->getQuery()->getSQL();
        return $query;
    }
    
    public function getRemoveIpZoneList($serviceLocationId,$NotInIds){
        $qb = $this->createQueryBuilder('i')
            ->select('i')
            ->where('i.id NOT IN(:Id)')
            ->setParameter('Id', $NotInIds)
            ->andWhere('i.serviceLocation = :serviceLocation')
            ->setParameter('serviceLocation', $serviceLocationId);
        
        $delIpZone = $qb->getQuery()->getResult();
        
        if($delIpZone){
            
            return $delIpZone;
        }
        
        return false;
    }
    
    
     public function getUserService($userIpAddress){
         
        $qb = $this->createQueryBuilder('ip');
            
        $resultIpAddressZone = $qb->getQuery()->getResult();
        
        $flag = false;
        
        if($resultIpAddressZone){
            
            foreach($resultIpAddressZone as $key => $val) {
                
                $fromIpAddress = ip2long($val->getFromIpAddress());
                $toIpAddress = ip2long($val->getToIpAddress());
                //echo $fromIpAddress.'=============='.$toIpAddress."<br>";
                
                if($fromIpAddress != "" AND $toIpAddress != "" AND $fromIpAddress <= $userIpAddress && $toIpAddress >= $userIpAddress)
                {
                    foreach($val->getServices() as $key=>$service) {
                        
                        $service->getName();
                        if(strtoupper($service->getName()) == 'IPTV')
                        {
                            $flag = true;
                        }    
                        
                    }
                }
                
            }
        }
        return $flag;
    }
    
    
    public function getUserIpAddressZone($admin){
        
        $returnArray = array();
        $serviceLocationId = array();
        
        if($admin) {
            
            foreach($admin->getServiceLocations() as $serviceLocation) {
                
                $serviceLocationId[] = $serviceLocation->getId();
            }
        }
        
        $qb = $this->createQueryBuilder('ip')
            ->where('ip.serviceLocation IN (:LID)')
            ->setParameter('LID', $serviceLocationId);
            
        $ipAddressZones = $qb->getQuery()->getResult();
        
        if($ipAddressZones) {
            
            foreach($ipAddressZones as $key => $record) {
                    
                    $returnArray[$key]['fromIP'] = ip2long($record->getFromIpAddress());
                    $returnArray[$key]['toIP'] = ip2long($record->getToIpAddress());
                    
            }
            
        }
        
        return $returnArray;
    }
    
    public function getUserZone($clientIp) {
        
        $qb= $this->createQueryBuilder('ip')
        ->where('ip.fromIpAddressLong <= :clientIp')
        ->andWhere('ip.toIpAddressLong >= :clientIp')
        ->setParameter('clientIp', ip2long($clientIp));
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    
    
    
    
}

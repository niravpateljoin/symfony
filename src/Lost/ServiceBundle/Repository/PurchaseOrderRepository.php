<?php

namespace Lost\ServiceBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PurchaseOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseOrderRepository extends EntityRepository
{
    public function getPurchaseHistoryGrid($limit = 0, $offset = 10, $order_by = "id", $sort_order = "asc", $searchData, $SearchType, $objHelper, $user) {
    
        $data = $this->trim_serach_data_purchase_history($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('po')
                                    ->leftJoin('po.servicePurchases', 'sp')
                                    ->leftjoin('sp.userService', 'us')
                                    ->leftJoin('sp.service', 's')
                                    ->leftJoin('sp.user', 'u')
                                    ->leftJoin('po.paymentMethod', 'pm')
                                    ->where('sp.purchaseOrder > :purchaseOrder')
                                    ->setParameter('purchaseOrder', 0)
                                    ->andWhere('sp.paymentStatus != :status')
                                    ->setParameter('status', 'New')
                                    ->orderby('po.id', 'DESC');
        if($user) {
    
            $query->andWhere('po.user = :userId')->setParameter('userId', $user);
        }
        
        if ($SearchType == 'ORLIKE') {
            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {
            $likeStr = $objHelper->andLikeSearch($data);
        }
        
        if(!empty($searchData) && isset($searchData['purchaseDate']))
        {
        
            $RequestDate = explode('~', $searchData['purchaseDate']);
            $ReqFrom = trim($RequestDate[0]);
            $ReqTo = trim($RequestDate[1]);
        
            if($ReqFrom != "")
            {
                $startDate = new \DateTime($ReqFrom);
                $query->andWhere('po.createdAt >= :today_startdatetime');
                $query->setParameter('today_startdatetime', $startDate->format('Y-m-d 00:00:00'));
            }
            if($ReqTo != "") {
                $endDate = new \DateTime($ReqTo);
                $query->andWhere('po.createdAt <= :today_enddatetime');
                $query->setParameter('today_enddatetime', $endDate->format('Y-m-d 23:59:59'));
            }
        }
        
        if ($likeStr) {
            
            $query->andWhere($likeStr);
        }
        
        $query->orderBy($order_by, $sort_order);
        
        $countData = count($query->getQuery()->getArrayResult());
        
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
        
        $result = $query->getQuery()->getResult();
        
        $dataResult = array();
        if (count($result) > 0) {
        
            $dataResult['result']      = $result;
            $dataResult['totalRecord'] = $countData;
        
            return $dataResult;        
        }
        
        return false;        
    }
    
    public function trim_serach_data_purchase_history($searchData, $SearchType) {
        
        $QueryStr = array();
    
        if (!empty($searchData)) {
    
            if ($SearchType == 'ANDLIKE') {
    
                $i = 0;
                foreach ($searchData as $key => $val) {
    
                    if ($key == 'orderNumber' && !empty($val)) {
    
                        $QueryStr[$i]['Field'] = 'po.orderNumber';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'totalAmount' && !empty($val)) {
    
                        $QueryStr[$i]['Field'] = 'po.totalAmount';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'refundAmount' && !empty($val)) {
    
                        $QueryStr[$i]['Field'] = 'po.refundAmount';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'paymentMethod' && !empty($val)) {
    
                        $QueryStr[$i]['Field'] = 'pm.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    if ($key == 'paymentStatus' && !empty($val)) {
    
                        $QueryStr[$i]['Field'] = 'po.paymentStatus';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    $i++;
                }
            }
        }
        return $QueryStr;
    }
}

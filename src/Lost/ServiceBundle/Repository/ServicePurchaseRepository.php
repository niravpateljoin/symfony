<?php

namespace Lost\ServiceBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ServicePurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServicePurchaseRepository extends EntityRepository
{
    
    public function getActiveUserService($user, $service) {
         
        $qb = $this->createQueryBuilder('sp')
                ->leftJoin('LostUserBundle:UserService', 'us', 'with', 'sp.services=us.service and sp.user=us.user')
                ->where('sp.services = :service')
                ->setParameter('service', $service)
                ->andWhere('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('sp.paymentStatus = :paymentstatus')
                ->setParameter('paymentstatus', 'Completed')
                ->andWhere('us.status = :status')
                ->setParameter('status', '1')
                ->orderBy('sp.updatedAt', 'desc');    
        $query = $qb->getQuery();    
        return $query->getResult();
    }
    
    public function getExpiredServices() {
         
        $qb = $this->createQueryBuilder('sp')
        ->select('sp')
        ->where('sp.expiredAt < :today')
        ->setParameter('today', date());
    
        return $qb->getQuery()
                  ->getResult();
    }
    
    public function getPurchaseCartItem($user, $paypalStatus = 'New', $purchaseOrder='') {
        
        $qb = $this->createQueryBuilder('sp')
                ->select('sp')
                ->where('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('sp.paymentStatus = :paypalStatus')
                ->setParameter('paypalStatus', $paypalStatus);
        
        if($purchaseOrder) {
           $qb->andWhere('sp.purchaseOrder = :purchaseOrder')->setParameter('purchaseOrder', $purchaseOrder);
        }
        
        $servicePurchases = $qb->getQuery()->getResult();
        
        $itemArr = array();
        if($servicePurchases){
            
            $amount = 0;
            foreach ($servicePurchases as $servicePurchase){
                
               
                $amount     = $servicePurchase->getPayableAmount();
                $Service    = ($servicePurchase->getService())?strtoupper($servicePurchase->getService()->getName()):'';
                $Package    = $servicePurchase->getPackageName();
                $IsAddon    = $servicePurchase->getIsAddon();
                $IsCredit   = $servicePurchase->getIsCredit();
                
                if($IsCredit && $servicePurchase->getCredit()){
                    
                    $name = 'Credit Purchase';
                    $desc = 'Pay $'.$amount.' and get $'.$servicePurchase->getCredit()->getCredit().' credit in your account.';
                }else{
                    $IsAddon = ($IsAddon)?'AddOn ':'';
                    $name = $Service.' '.$IsAddon.'Service';
                    $desc = 'Package: '.$Package;
                }
                
                $tempArr = array();
                $tempArr['name']      = $name;
                $tempArr['desc']      = $desc;
                $tempArr['amt']       = $amount;
                
                $itemArr[] = $tempArr;
            }
            
            return array('item' => $itemArr);
        }
        return false;
    }
    
    public function getTotalSuccessAndFailPayment($purchaseOrderId, $user)
    {
        $qb = $this->createQueryBuilder('sp')
                    ->select('sp')
                    ->where('sp.purchaseOrder = :purchaseOrderId')
                    ->setParameter('purchaseOrderId', $purchaseOrderId)
                    ->andWhere('sp.user = :userId')
                    ->setParameter('userId', $user);
    
        $result = $qb->getQuery()->getResult();
    
        $responseArr = array();
        $responseArr['totalSuccessPayment'] = '';
        $responseArr['totalFailPayment']    = '';
        $totalSuccessPaymentAmt = 0;
        $totalFailPaymentAmt = 0;
    
        if($result){
    
            foreach ($result as $purchase){
                
                if($purchase->getRechargeStatus() == 1){

                    $totalSuccessPaymentAmt += $purchase->getPayableAmount();
                }else{
                    
                    $totalFailPaymentAmt += $purchase->getPayableAmount();
                }
            }
            
            $responseArr['totalSuccessPayment'] = $totalSuccessPaymentAmt;
            $responseArr['totalFailPayment']    = $totalFailPaymentAmt;
        }
    
        return $responseArr;
    }
    
    public function getPaymentCompletedData($user,$purchaseOrderId,$serviceId = '',$isAddonPackage = 0){
        
        $qb = $this->createQueryBuilder('sp')
                    ->select('sp')
                    ->where('sp.user = :user')
                    ->setParameter('user', $user)
                    ->andWhere('sp.paymentStatus = :paymentStatus')
                    ->setParameter('paymentStatus', 'Completed')
                    ->andWhere('sp.purchaseOrder = :purchaseOrder')
                    ->setParameter('purchaseOrder', $purchaseOrderId)
                    ->andWhere('sp.isAddon = :isAddon')
                    ->setParameter('isAddon', $isAddonPackage);
        
        if($serviceId) {
            
            $qb->andWhere('sp.service = :service')->setParameter('service', $serviceId);
        }
        
        $paymentSuccessData = $qb->getQuery()->getResult();
    
        if($paymentSuccessData){
            
            return $paymentSuccessData;
        }
        return false;
    }
    
    public function getPurchaseIds($sessionId) {
        
        $qb = $this->createQueryBuilder('sp')
                ->select('sp.id, sp.packageId')
                ->where('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'New')
                ->getQuery();
        
        $result = $qb->getArrayResult();
        
        return $result;        
    }
    
    public function getUserCartItems($user,$sessionId,$paymentStatus = 'New') {
         
        $qb = $this->createQueryBuilder('sp')
                    ->select('sp')
                    ->where('sp.user = :userid')
                    ->setParameter('userid', $user)
                    ->andWhere('sp.paymentStatus = :paymentStatus')
                    ->setParameter('paymentStatus', $paymentStatus)
                    ->andWhere('sp.sessionId = :sessionId')
                    ->setParameter('sessionId', $sessionId)
                    ->andWhere('sp.isCredit = :isCredit')
                    ->setParameter('isCredit', 0)
                    ->orderBy('sp.updatedAt', 'DESC');
        
        
    
        $result = $qb->getQuery()->getResult();
        
        return $result;
    }
    
    
    public function selectPackage($sessionId,$user,$service)
    {
        $query = $this->createQueryBuilder('sp')
                ->leftJoin('sp.service', 's')
                ->where('sp.sessionId = :sessionId')
                ->setParameter('sessionId', $sessionId)
                ->andWhere('sp.paymentStatus = :paymentStatus')
                ->setParameter('paymentStatus', 'New')
                ->andWhere('sp.user = :user')
                ->setParameter('user', $user)
                ->andWhere('s.name = :name')
                ->setParameter('name', $service);
        
        
         $returnResult = $query->getQuery()->getResult();
         return $returnResult;
         
        
    } 
    
    public function deleteServicePackage($sessionId,$user,$service, $id,$addon)
    {
        
        $qb = $this->createQueryBuilder('s');
        $qb->delete();
        $qb->where('s.sessionId = :sessionId');
        $qb->setParameter('sessionId', $sessionId);
        
        $qb->andWhere('s.paymentStatus = :paymentStatus');
        $qb->setParameter('paymentStatus', 'New');
        
        $qb->andWhere('s.user = :user');
        $qb->setParameter('user', $user);
        
        $qb->andWhere('s.service = :service');
        $qb->setParameter('service', $service);
        
        if($addon && $id){
            $qb->andWhere('s.isAddon = :isAddon');
            $qb->setParameter('isAddon', 1);
            
            $qb->andWhere('s.id = :spid');
            $qb->setParameter('spid', $id);
        }
        return $qb->getQuery()->execute();
    } 
    
    public function getAddonPackage($sessionId,$user,$service,$addonPackage)
    {
        $returnResult = array();
        
             $query = $this->createQueryBuilder('sp')
                 ->select('sp.packageId')    
                 ->leftJoin('sp.service', 's')
                 ->where('sp.sessionId = :sessionId')
                 ->setParameter('sessionId', $sessionId)
                 ->andWhere('sp.paymentStatus = :paymentStatus')
                 ->setParameter('paymentStatus', 'New')
                 ->andWhere('sp.isAddon = :isAddon')
                 ->setParameter('isAddon', 1)
                 ->andWhere('sp.user = :user')
                 ->setParameter('user', $user)
                 ->andWhere('s.name = :name')
                 ->setParameter('name', $service);
                 
            $result = $query->getQuery()->getArrayResult();
            if($result) {
                
                foreach($result as $key=>$val)
                {
                    $returnResult[$val['packageId']] = $val['packageId'];
                }    
                
            }
           
            return $returnResult;
          
    }
    
    public function getCartPurchaseItem($user,$sessionId,$paymentStatus = 'New'){
    
        $query = $this->createQueryBuilder('sp')
                    ->select('sp')
                    ->leftJoin('sp.service', 's')
                    ->where('sp.sessionId = :sessionId')
                    ->setParameter('sessionId', $sessionId)
                    ->andWhere('sp.paymentStatus = :paymentStatus')
                    ->setParameter('paymentStatus', $paymentStatus)
                    ->andWhere('sp.user = :user')
                    ->setParameter('user', $user);
         
        $result = $query->getQuery()->getResult();
    
        if($result){
            
            return $result;
        }        
        return false;
    }
    
    
    public function getUserPurchaseHistory($user,$ipAddressZones) {
        
         $queryPurchaseHistory = $this->createQueryBuilder('sp')
                                ->leftJoin('sp.purchaseOrder', 'po')
                                ->leftjoin('sp.userService', 'us')
                                ->leftJoin('sp.service', 's')
                                ->leftJoin('sp.user', 'u')
                                ->leftJoin('po.paypalCheckout', 'pp')
                                ->leftJoin('po.paymentMethod', 'pm')
                                ->where('sp.purchaseOrder > :purchaseOrder')
                                ->setParameter('purchaseOrder', 0)
                                ->andWhere('po.paymentStatus != :status')
                                ->setParameter('status', 'New')
                                ->orderby('sp.id', 'DESC');
       
       if(!empty($ipAddressZones)) {
            
               foreach($ipAddressZones as $key => $value) {
                   
                    $queryPurchaseHistory->orWhere('u.ipAddressLong >= :fromIp')
                          ->setParameter('fromIp', $value['fromIP']);
                    
                    $queryPurchaseHistory->andWhere('u.ipAddressLong <= :toIp')
                          ->setParameter('toIp', $value['toIP']);
                    
               }
            
        }
         
        if($user) {
            
             $queryPurchaseHistory->andWhere('sp.user = :userId')
                                  ->setParameter('userId', $user);
        } 
        return $queryPurchaseHistory;
        
       
    }
    
     //Added for Gridlist
    public function getPurchaseHistoryGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper) {
        
        $data = $this->trim_serach_data($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('sp')
                                ->leftJoin('sp.purchaseOrder', 'po')
                                ->leftjoin('sp.userService', 'us')
                                ->leftJoin('sp.service', 's')
                                ->leftJoin('sp.user', 'u')
                                ->leftJoin('po.paypalCheckout', 'pp')
                                ->leftJoin('po.paymentMethod', 'pm')
                                ->where('sp.purchaseOrder > :purchaseOrder')
                                ->setParameter('purchaseOrder', 0)
                                ->andWhere('po.paymentStatus != :status')
                                ->setParameter('status', 'New')
                                ->orderby('sp.id', 'DESC');
        
        
               
                 

        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);
       
        $countData = count($query->getQuery()->getArrayResult());
           
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
       
        $result = $query->getQuery()->getResult();
        
        $dataResult = array();
       
        if ($countData > 0) {
            
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
           
            return $dataResult;
        }
        return false;
    }
    
     public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                     if ($key == 'Username' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'u.username';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }
    
}

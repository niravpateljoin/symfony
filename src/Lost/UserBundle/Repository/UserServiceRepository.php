<?php

namespace Lost\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserServiceRepository extends EntityRepository {

    public function getUserPurchaseHistory($user) {

        $queryPurchaseHistory = $this->createQueryBuilder('us')
            ->leftJoin('us.purchaseOrder', 'po')
            ->leftJoin('us.service', 's')
            ->leftJoin('us.user', 'u')
            ->leftJoin('po.paypalCheckout', 'pp')
            ->leftJoin('po.paymentMethod', 'pm')
            ->where('us.user = :userId')
            ->setParameter('userId', $user)
            ->orderby('us.id', 'DESC');
        
        return $queryPurchaseHistory;
    }

    public function getPurchaseHistory() {

        $queryPurchaseHistory = $this->createQueryBuilder('sp')
                                ->leftJoin('sp.purchaseOrder', 'po')
                                ->leftjoin('sp.userService', 'us')
                                ->leftJoin('sp.service', 's')
                                ->leftJoin('sp.user', 'u')
                                ->leftJoin('po.paypalCheckout', 'pp')
                                ->leftJoin('po.paymentMethod', 'pm')     
                                ->orderby('sp.id', 'DESC');
        
        
        return $queryPurchaseHistory;
    }

    public function getSearchPurchaseHistory($query, $search) {

        $query->andWhere('u.username LIKE :username')->setParameter('username', '%' . $search . '%');
        
        return $query;
    }

    public function getExpiredPackage() {

        $date = new \DateTime();
        
        $qb = $this->createQueryBuilder('us')->select('us')->where('us.expiryDate <= :expiryDate')->setParameter('expiryDate', $date->format('Y-m-d H:i:s'))->andWhere('us.status = :status')->setParameter('status', 1);
        
        $expiredData = $qb->getQuery()->getResult();
        
        if($expiredData) {
            
            return $expiredData;
        }
        
        return false;
    }

    public function getExpiredPackageForNotification() {

        $expdate = new \DateTime();
        $expdate->modify('+72 HOURS');
        
        $qb = $this->createQueryBuilder('us')->select('us')->where('us.expiryDate = :expiryDate')->setParameter('expiryDate', $expdate->format('Y-m-d 23:59:59'))->andWhere('us.status = :status')->setParameter('status', 1)->andWhere('us.sentExpiredNotification != :sentExpiredNotification')->setParameter('sentExpiredNotification', 1);
        
        $expiredData = $qb->getQuery()->getResult();
        
        if($expiredData) {
            
            return $expiredData;
        }
        
        return false;
    }

    public function getServicePurchasedUsers($serviceids, $fromIp, $toIp) {

        $qb = $this->createQueryBuilder('us')
                    ->select('us')
                    ->where('us.service IN(:serviceIds)')
                    ->setParameter('serviceIds', array_values($serviceids))
                    ->andWhere('us.serviceLocationIp >=:fromIP')
                    ->setParameter('fromIP', $fromIp)
                    ->andWhere('us.serviceLocationIp <=:toIP')
                    ->setParameter('toIP', $toIp)
                    ->andWhere('us.status =:status')
                    ->setParameter('status', 1)
                    ->groupBy('us.user');
        
        $query = $qb->getQuery();
        
        return $query->getResult();
    }

    /**
     * 
     * @param object $user
     * @param boolean $flag 
     * 
     * $flag represent the status of the purchased service.
     */
    public function getUsersPurchasedService($user, $flag) {

        $result = array();
        
        $query = $this->createQueryBuilder('us')->select('us')->where('us.user = :user')->setParameter('user', $user);
        
        if(! $flag) {
            
            $query->andWhere('us.status = :status')->setParameter('status', 1);
        }
        
        $result = $query->getQuery()->getResult();
        
        return $result;
    }
    
    public function getActiveServices($userId) {
        $services = array();
    
        $qb = $this->createQueryBuilder('us')
        ->where('us.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere('us.status = :status')
        ->setParameter('status', 1);
    
        $result = $qb->getQuery()->getResult();
    
        if($result) {
            foreach($result as $record) {
                $services[$record->getService()->getName()] = $record->getService()->getName();
            }
        }
    
        return $services;
    }
    
    public function getUserActiveServiceForCompensation($serviceNameArr,$userId){
        
        if(isset($serviceNameArr) && !empty($serviceNameArr)){
            
            $userActiveServiceNameArr = array();
            $queryServiceName = $this->createQueryBuilder('us')
                                ->select('us')
                                ->leftJoin('us.service', 's')
                                ->where('us.user = :userId')
                                ->setParameter('userId', $userId)
                                ->andWhere('us.status = :status')
                                ->setParameter('status', 1);
            
            $serviceResult = $queryServiceName->getQuery()->getResult();
            
            if($serviceResult){
    
                foreach ($serviceResult as $userService){
    
                    if($userService->getService()){
                    
                        $serviceName = strtoupper($userService->getService()->getName());
                        
                        $userActiveServiceNameArr[$serviceName] = $userService;
                        $userActiveServiceNameArr['Service'][] = $serviceName;                    
                    }
                }
                
                $returnResult = array();
                $returnResult['autoExtendService'] = '';
                $returnResult['data']              = '';
                if(isset($userActiveServiceNameArr['Service']) && !empty($userActiveServiceNameArr['Service'])){
                    
                    if(in_array('IPTV',$serviceNameArr) && in_array('ISP',$serviceNameArr)){
                    
                        if(in_array('IPTV',$userActiveServiceNameArr['Service']) && in_array('ISP',$userActiveServiceNameArr['Service'])){
                    
                            $returnResult['data']['IPTV'] = $userActiveServiceNameArr['IPTV'];
                            $returnResult['data']['ISP']  = $userActiveServiceNameArr['ISP'];                            
                        }
                    }else if(in_array('IPTV',$serviceNameArr)){
                        
                        if(in_array('IPTV',$userActiveServiceNameArr['Service']) && in_array('ISP',$userActiveServiceNameArr['Service'])){
                            
                            $returnResult['data']['IPTV'] = $userActiveServiceNameArr['IPTV'];
                            $returnResult['data']['ISP']  = $userActiveServiceNameArr['ISP'];    
                            $returnResult['autoExtendService'] = 'ISP';
                        }else if(in_array('IPTV',$userActiveServiceNameArr['Service'])){
                    
                            $returnResult['data']['IPTV'] = $userActiveServiceNameArr['IPTV'];                            
                        }
                    }else if(in_array('ISP',$serviceNameArr)){
                        
                        if(in_array('IPTV',$userActiveServiceNameArr['Service']) && in_array('ISP',$userActiveServiceNameArr['Service'])){
                    
                            $returnResult['data']['ISP']  = $userActiveServiceNameArr['ISP'];
                            $returnResult['data']['IPTV'] = $userActiveServiceNameArr['IPTV'];
                            $returnResult['autoExtendService'] = 'IPTV';
                        }else if(in_array('ISP',$userActiveServiceNameArr['Service'])){
                    
                            $returnResult['data']['ISP'] = $userActiveServiceNameArr['ISP'];                            
                        }
                    }
                    
                    return $returnResult;
                }                                 
            }        
        }        
        
        return false;
    }
    
    
    
}

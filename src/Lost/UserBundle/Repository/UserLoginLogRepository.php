<?php

namespace Lost\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserLoginLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserLoginLogRepository extends EntityRepository {
    /**
     * Fetch all records from userLoginLog table 
     * @param type $user
     * @return type
     */
    public function getAllUserLoginLogQuery($user, $id) {
        $query = $this->createQueryBuilder('l')
                //->select('u.id, u.firstname, u.lastname, c.name, sp.name') //, u.isloggedin
                //->addSelect('u.id, u.firstname, u.lastname, c.name, sp.id') //, u.isloggedin
                ->innerJoin('l.user', 'u')
                ->innerJoin('l.country', 'c')
                //->leftJoin('LostServiceBundle:ServicePurchase', 'sp', 'with', 'u.id=sp.user')
                ->where('u.locked = :locked')
                ->setParameter('locked', 0)
                ->andWhere('u.isDeleted = :deleted')
                ->setParameter('deleted', 0)
                ->andWhere('u.roles LIKE :role')
                ->setParameter('role', '%ROLE_USER%');
        
        if($id) {
            $query->andWhere('l.user = :user')
                    ->setParameter('user', $user);
        }
        
        return $query;
    }
    
    /**
     * Search from userLoginLog
     * 
     * @param type $query
     * @param type $searchParam
     * @return type
     */
    public function getUserLoginLogSearch($query, $searchParam) {
        
        $query->andWhere('u.username LIKE :username OR u.firstname LIKE :firstname OR u.lastname LIKE :lastname OR c.name LIKE :country OR l.ipAddress LIKE :ip ')
                ->setParameter('username', '%' . $searchParam['search'] . '%')
                ->setParameter('firstname', '%' . $searchParam['search'] . '%')
                ->setParameter('lastname', '%' . $searchParam['search'] . '%')
                ->setParameter('ip', '%' . $searchParam['search'] . '%')
                ->setParameter('country', '%' . $searchParam['search'] . '%');

        
        
//        if($searchParam['serviceType'] == 'iptv') {
//            $query->andWhere('s.iptvEnabled = :iptv')
//                ->setParameter('iptv', 1);
//        }
//        elseif($searchParam['serviceType'] == 'internet') {
//            $query->andWhere('s.internetEnabled = :internet')
//                ->setParameter('internet', 1);
//        } elseif ($searchParam['serviceType'] == 'both') {
//            $query->andWhere('s.iptvEnabled = :iptv')
//                ->setParameter('iptv', 1);
//            $query->andWhere('s.internetEnabled = :internet')
//                ->setParameter('internet', 1);
//        }
        
         if(isset($searchParam['startDate']) && $searchParam['startDate']) {
            
            $startDate = new \DateTime($searchParam['startDate']);

            $query->andWhere('l.createdAt >= :startDate')
                  ->setParameter("startDate", $startDate->format('Y-m-d 00:00:00'));
        }
        
        if(isset($searchParam['endDate']) && $searchParam['endDate']) {
            
            $endDate = new \DateTime($searchParam['endDate']);
            
            $query->andWhere('l.createdAt <= :endDate')
                  ->setParameter("endDate", $endDate->format('Y-m-d 23:59:59'));
        }
        
        return $query;
    }
    
     //Added for Gridlist
    public function getUserLoginLogGridList($limit = 0, $offset = 10, $orderBy = "id", $sortOrder = "asc", $searchData, $SearchType, $objHelper,$user,$id) {
        
        $data = $this->trim_serach_data($searchData, $SearchType);
        
        $query = $this->createQueryBuilder('l')
                //->select('u.id, u.firstname, u.lastname, c.name, sp.name') //, u.isloggedin
                //->addSelect('u.id, u.firstname, u.lastname, c.name, sp.id') //, u.isloggedin
                ->innerJoin('l.user', 'u')
                ->innerJoin('l.country', 'c')
               
                
                //->innerJoin('u.serviceLocations', 'sl')
                //->leftJoin('LostServiceBundle:ServicePurchase', 'sp', 'with', 'u.id=sp.user')
                ->where('u.locked = :locked')
                ->setParameter('locked', 0)
                ->andWhere('u.isDeleted = :deleted')
                ->setParameter('deleted', 0)
                ->andWhere('u.roles LIKE :role')
                ->setParameter('role', '%ROLE_USER%');
        
        if($id) {
            $query->andWhere('l.user = :user')
                    ->setParameter('user',$user);
        }
          
       
        if ($SearchType == 'ORLIKE') {

            $likeStr = $objHelper->orLikeSearch($data);
        }
        if ($SearchType == 'ANDLIKE') {

            $likeStr = $objHelper->andLikeSearch($data);
        }
        
        if(!empty($searchData) && isset($searchData['Logintime']))
        {
               
                $RequestDate = explode('~', $searchData['Logintime']);
    		$ReqFrom = trim($RequestDate[0]);
    		$ReqTo = trim($RequestDate[1]);
                
                if($ReqFrom != "")
                {    
                    $startDate = new \DateTime($ReqFrom);
                    $query->andWhere('l.createdAt >= :today_startdatetime');
                    $query->setParameter('today_startdatetime', $startDate->format('Y-m-d 00:00:00'));
                }
                if($ReqTo != "") {
                    $endDate = new \DateTime($ReqTo);
                    $query->andWhere('l.createdAt <= :today_enddatetime');
                    $query->setParameter('today_enddatetime', $endDate->format('Y-m-d 23:59:59'));
                }
        }  

        if ($likeStr) {

            $query->andWhere($likeStr);
        }

        $query->orderBy($orderBy, $sortOrder);
       
        $countData = count($query->getQuery()->getArrayResult());
           
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
       
        $result = $query->getQuery()->getResult();
        
        $dataResult = array();
       
        if ($countData > 0) {
            
            $dataResult['result'] = $result;
            $dataResult['totalRecord'] = $countData;
           
            return $dataResult;
        }
        return false;
    }
    
     public function trim_serach_data($searchData, $SearchType) {

        $QueryStr = array();

        if (!empty($searchData)) {

            if ($SearchType == 'ANDLIKE') {

                $i = 0;
                foreach ($searchData as $key => $val) {
                    
                     if ($key == 'Name' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'u.username';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    
                    if ($key == 'IpAddress' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'l.ipAddress';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }
                    
                    if ($key == 'Country' && !empty($val)) {

                        $QueryStr[$i]['Field'] = 'c.name';
                        $QueryStr[$i]['Value'] = $val;
                        $QueryStr[$i]['Operator'] = 'LIKE';
                    }

                    $i++;
                }
            } else {
                
            }
        }
        return $QueryStr;
    }
}
